
REQ4_CarWith.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ba4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000ba4  00000c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080006a  0080006a  00000c42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002520  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c55  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f5  00000000  00000000  0000406d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  00005364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce1  00000000  00000000  00005930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aeb  00000000  00000000  00006611  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_1>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_5>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	7a 03       	fmul	r23, r18
  56:	7f 03       	fmul	r23, r23
  58:	86 03       	fmuls	r16, r22
  5a:	8d 03       	fmulsu	r16, r21
  5c:	94 03       	fmuls	r17, r20
  5e:	9b 03       	fmulsu	r17, r19
  60:	a2 03       	fmuls	r18, r18
  62:	a9 03       	fmulsu	r18, r17

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 ea       	ldi	r30, 0xA4	; 164
  78:	fb e0       	ldi	r31, 0x0B	; 11
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	aa e6       	ldi	r26, 0x6A	; 106
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a1 38       	cpi	r26, 0x81	; 129
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  9a:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Av_gpioPortDirection>:
		case myPORTD :
		result = PIN_D;
		break;
	}
	return result;
}
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	41 f0       	breq	.+16     	; 0xb6 <Av_gpioPortDirection+0x14>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <Av_gpioPortDirection+0x10>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	39 f0       	breq	.+14     	; 0xba <Av_gpioPortDirection+0x18>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	39 f0       	breq	.+14     	; 0xbe <Av_gpioPortDirection+0x1c>
  b0:	08 95       	ret
  b2:	6a bb       	out	0x1a, r22	; 26
  b4:	08 95       	ret
  b6:	67 bb       	out	0x17, r22	; 23
  b8:	08 95       	ret
  ba:	64 bb       	out	0x14, r22	; 20
  bc:	08 95       	ret
  be:	61 bb       	out	0x11, r22	; 17
  c0:	08 95       	ret

000000c2 <Av_gpioPinDirection>:
 * @param pins
 * @param direction
 */
void Av_gpioPinDirection(uint8 port, uint8 pins, uint8 direction)
{
	switch(port)
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	a1 f0       	breq	.+40     	; 0xee <Av_gpioPinDirection+0x2c>
  c6:	28 f0       	brcs	.+10     	; 0xd2 <Av_gpioPinDirection+0x10>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	f9 f0       	breq	.+62     	; 0x10a <Av_gpioPinDirection+0x48>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	59 f1       	breq	.+86     	; 0x126 <Av_gpioPinDirection+0x64>
  d0:	08 95       	ret
	{
		case myPORTA :
		{
		switch(direction)
  d2:	44 23       	and	r20, r20
  d4:	19 f0       	breq	.+6      	; 0xdc <Av_gpioPinDirection+0x1a>
  d6:	4f 3f       	cpi	r20, 0xFF	; 255
  d8:	31 f0       	breq	.+12     	; 0xe6 <Av_gpioPinDirection+0x24>
  da:	08 95       	ret
		{
		case set_IN : 
		DDR_A &= ~(pins);
  dc:	8a b3       	in	r24, 0x1a	; 26
  de:	60 95       	com	r22
  e0:	68 23       	and	r22, r24
  e2:	6a bb       	out	0x1a, r22	; 26
		break;
  e4:	08 95       	ret
		case set_OUT : 
		DDR_A |= (pins);
  e6:	8a b3       	in	r24, 0x1a	; 26
  e8:	68 2b       	or	r22, r24
  ea:	6a bb       	out	0x1a, r22	; 26
		break;
  ec:	08 95       	ret
		}
		break;
		
		case myPORTB :
		{
		switch(direction)
  ee:	44 23       	and	r20, r20
  f0:	19 f0       	breq	.+6      	; 0xf8 <Av_gpioPinDirection+0x36>
  f2:	4f 3f       	cpi	r20, 0xFF	; 255
  f4:	31 f0       	breq	.+12     	; 0x102 <Av_gpioPinDirection+0x40>
  f6:	08 95       	ret
		{
		case set_IN :
			DDR_B &= ~(pins);
  f8:	87 b3       	in	r24, 0x17	; 23
  fa:	60 95       	com	r22
  fc:	68 23       	and	r22, r24
  fe:	67 bb       	out	0x17, r22	; 23
			break;
 100:	08 95       	ret
		case set_OUT :
			DDR_B |= (pins);
 102:	87 b3       	in	r24, 0x17	; 23
 104:	68 2b       	or	r22, r24
 106:	67 bb       	out	0x17, r22	; 23
			break;
 108:	08 95       	ret
		}
		}
		break;
		case myPORTC :
		{
			switch(direction)
 10a:	44 23       	and	r20, r20
 10c:	19 f0       	breq	.+6      	; 0x114 <Av_gpioPinDirection+0x52>
 10e:	4f 3f       	cpi	r20, 0xFF	; 255
 110:	31 f0       	breq	.+12     	; 0x11e <Av_gpioPinDirection+0x5c>
 112:	08 95       	ret
			{
				case set_IN :
				DDR_C &= ~(pins);
 114:	84 b3       	in	r24, 0x14	; 20
 116:	60 95       	com	r22
 118:	68 23       	and	r22, r24
 11a:	64 bb       	out	0x14, r22	; 20
				break;
 11c:	08 95       	ret
				case set_OUT :
				DDR_C |= (pins);
 11e:	84 b3       	in	r24, 0x14	; 20
 120:	68 2b       	or	r22, r24
 122:	64 bb       	out	0x14, r22	; 20
				break;
 124:	08 95       	ret
			}
		}
		break;
		case myPORTD :
		{
			switch(direction)
 126:	44 23       	and	r20, r20
 128:	19 f0       	breq	.+6      	; 0x130 <Av_gpioPinDirection+0x6e>
 12a:	4f 3f       	cpi	r20, 0xFF	; 255
 12c:	31 f0       	breq	.+12     	; 0x13a <Av_gpioPinDirection+0x78>
 12e:	08 95       	ret
			{
				case set_IN :
				DDR_D &= ~(pins);
 130:	81 b3       	in	r24, 0x11	; 17
 132:	60 95       	com	r22
 134:	68 23       	and	r22, r24
 136:	61 bb       	out	0x11, r22	; 17
				break;
 138:	08 95       	ret
				case set_OUT :
				DDR_D |= (pins);
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	68 2b       	or	r22, r24
 13e:	61 bb       	out	0x11, r22	; 17
 140:	08 95       	ret

00000142 <Av_gpioPinWrite>:
 * @param pins
 * @param value
 */
void Av_gpioPinWrite(uint8 port, uint8 pins, uint8 value)
{
	switch(value)
 142:	44 23       	and	r20, r20
 144:	d1 f0       	breq	.+52     	; 0x17a <Av_gpioPinWrite+0x38>
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	99 f5       	brne	.+102    	; 0x1b0 <Av_gpioPinWrite+0x6e>
	{
		case HIGH:
			switch(port)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	51 f0       	breq	.+20     	; 0x162 <Av_gpioPinWrite+0x20>
 14e:	28 f0       	brcs	.+10     	; 0x15a <Av_gpioPinWrite+0x18>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	59 f0       	breq	.+22     	; 0x16a <Av_gpioPinWrite+0x28>
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	69 f0       	breq	.+26     	; 0x172 <Av_gpioPinWrite+0x30>
 158:	08 95       	ret
			{
					case myPORTA :
						PORT_A |= (pins);
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	68 2b       	or	r22, r24
 15e:	6b bb       	out	0x1b, r22	; 27
						break;
 160:	08 95       	ret
					case myPORTB :
						PORT_B |= (pins);
 162:	88 b3       	in	r24, 0x18	; 24
 164:	68 2b       	or	r22, r24
 166:	68 bb       	out	0x18, r22	; 24
						break;
 168:	08 95       	ret
					case myPORTC :
						PORT_C |= (pins);
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	68 2b       	or	r22, r24
 16e:	65 bb       	out	0x15, r22	; 21
						break;
 170:	08 95       	ret
					case myPORTD :
						PORT_D |= (pins);
 172:	82 b3       	in	r24, 0x12	; 18
 174:	68 2b       	or	r22, r24
 176:	62 bb       	out	0x12, r22	; 18
						break;
 178:	08 95       	ret
		}
		break;
		
		case LOW : 
		switch(port)
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	59 f0       	breq	.+22     	; 0x194 <Av_gpioPinWrite+0x52>
 17e:	28 f0       	brcs	.+10     	; 0x18a <Av_gpioPinWrite+0x48>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	69 f0       	breq	.+26     	; 0x19e <Av_gpioPinWrite+0x5c>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	81 f0       	breq	.+32     	; 0x1a8 <Av_gpioPinWrite+0x66>
 188:	08 95       	ret
		{
			case myPORTA :
			PORT_A &= ~(pins);
 18a:	8b b3       	in	r24, 0x1b	; 27
 18c:	60 95       	com	r22
 18e:	68 23       	and	r22, r24
 190:	6b bb       	out	0x1b, r22	; 27
			break;
 192:	08 95       	ret
			case myPORTB :
			PORT_B &= ~(pins);
 194:	88 b3       	in	r24, 0x18	; 24
 196:	60 95       	com	r22
 198:	68 23       	and	r22, r24
 19a:	68 bb       	out	0x18, r22	; 24
			break;
 19c:	08 95       	ret
			case myPORTC :
			PORT_C &= ~(pins);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	60 95       	com	r22
 1a2:	68 23       	and	r22, r24
 1a4:	65 bb       	out	0x15, r22	; 21
			break;
 1a6:	08 95       	ret
			case myPORTD :
			PORT_D &= ~(pins);
 1a8:	82 b3       	in	r24, 0x12	; 18
 1aa:	60 95       	com	r22
 1ac:	68 23       	and	r22, r24
 1ae:	62 bb       	out	0x12, r22	; 18
 1b0:	08 95       	ret

000001b2 <__vector_1>:
volatile uint8 flag = 0,numOfOverflows = 0;
volatile uint64 raising_time_ns = 0;


t_ISR(INT0_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	if(flag == 0)
 1d8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <flag>
 1dc:	81 11       	cpse	r24, r1
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <__vector_1+0x40>
	{
		TCNT2 = 0;
 1e0:	14 bc       	out	0x24, r1	; 36
		Av_timer2Start();
 1e2:	0e 94 b2 03 	call	0x764	; 0x764 <Av_timer2Start>
		numOfOverflows = 0;
 1e6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <numOfOverflows>
		flag = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <flag>
 1f0:	29 c0       	rjmp	.+82     	; 0x244 <__vector_1+0x92>
	}
	else if(flag == 1)
 1f2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <flag>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	29 f5       	brne	.+74     	; 0x244 <__vector_1+0x92>
	{
		raising_time_ns =  ( ( (numOfOverflows * 256) + TCNT2 ) * ( 1000000000/F_CPU ) );
 1fa:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <numOfOverflows>
 1fe:	84 b5       	in	r24, 0x24	; 36
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	ba 2f       	mov	r27, r26
 204:	aa 27       	eor	r26, r26
 206:	a8 0f       	add	r26, r24
 208:	b1 1d       	adc	r27, r1
 20a:	2d e7       	ldi	r18, 0x7D	; 125
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__usmulhisi3>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 21a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 21e:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 222:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 226:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end+0x4>
 22a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x5>
 22e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end+0x6>
 232:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__data_end+0x7>
		Av_timer1Stop();
 236:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Av_timer1Stop>
		numOfOverflows = 0;
 23a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <numOfOverflows>
		TCNT2 = 0;
 23e:	14 bc       	out	0x24, r1	; 36
		flag = 0;
 240:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <flag>
	}
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <__vector_5>:

t_ISR(TIMER2_OVF_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
	numOfOverflows++;
 276:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <numOfOverflows>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <numOfOverflows>
}
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <Av_UltraSonicDistanc>:

uint32 Av_UltraSonicDistanc()
{
	uint32 theDistance;
	theDistance = ( (raising_time_ns/1000000000.0) * (34300/2) );
 28c:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 290:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
 294:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <__data_end+0x2>
 298:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <__data_end+0x3>
 29c:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <__data_end+0x4>
 2a0:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <__data_end+0x5>
 2a4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end+0x6>
 2a8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x7>
	return theDistance;
 2ac:	0e 94 8b 04 	call	0x916	; 0x916 <__floatundisf>
 2b0:	28 e2       	ldi	r18, 0x28	; 40
 2b2:	3b e6       	ldi	r19, 0x6B	; 107
 2b4:	4e e6       	ldi	r20, 0x6E	; 110
 2b6:	5e e4       	ldi	r21, 0x4E	; 78
 2b8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divsf3>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	3c ef       	ldi	r19, 0xFC	; 252
 2c0:	45 e8       	ldi	r20, 0x85	; 133
 2c2:	56 e4       	ldi	r21, 0x46	; 70
 2c4:	0e 94 1a 05 	call	0xa34	; 0xa34 <__mulsf3>
 2c8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fixunssfsi>
}
 2cc:	08 95       	ret

000002ce <Av_ICU_Init>:

void Av_ICU_Init()
{
 2ce:	ef 92       	push	r14
 2d0:	0f 93       	push	r16
	INT0_Init_anyChange();
 2d2:	8b b7       	in	r24, 0x3b	; 59
 2d4:	80 64       	ori	r24, 0x40	; 64
 2d6:	8b bf       	out	0x3b, r24	; 59
 2d8:	85 b7       	in	r24, 0x35	; 53
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	85 bf       	out	0x35, r24	; 53
 2de:	85 b7       	in	r24, 0x35	; 53
 2e0:	8d 7f       	andi	r24, 0xFD	; 253
 2e2:	85 bf       	out	0x35, r24	; 53
	Av_timer2Init(T2_NORMAL_MODE,T2_OC0_DIS,T2_PRESCALER_1,0,0,T2_INTERRUPT_NORMAL);
 2e4:	68 94       	set
 2e6:	ee 24       	eor	r14, r14
 2e8:	e6 f8       	bld	r14, 6
 2ea:	00 e0       	ldi	r16, 0x00	; 0
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Av_timer2Init>
	interrupts_On();
 2f8:	8f b7       	in	r24, 0x3f	; 63
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	8f bf       	out	0x3f, r24	; 63
}
 2fe:	0f 91       	pop	r16
 300:	ef 90       	pop	r14
 302:	08 95       	ret

00000304 <Av_UltraSonicTrigger>:

void Av_UltraSonicTrigger()
{
	Av_gpioPinWrite(myPORTA,BIT0,HIGH);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	88 e2       	ldi	r24, 0x28	; 40
 310:	8a 95       	dec	r24
 312:	f1 f7       	brne	.-4      	; 0x310 <Av_UltraSonicTrigger+0xc>
	_delay_us(15);
	Av_gpioPinWrite(myPORTA,BIT0,LOW);	
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 31e:	08 95       	ret

00000320 <led_Init>:
 * Description: Initilizing Function to the Led
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void led_Init(led led_Num)
{
	switch(led_Num)
 320:	80 32       	cpi	r24, 0x20	; 32
 322:	a1 f0       	breq	.+40     	; 0x34c <led_Init+0x2c>
 324:	18 f4       	brcc	.+6      	; 0x32c <led_Init+0xc>
 326:	80 31       	cpi	r24, 0x10	; 16
 328:	31 f0       	breq	.+12     	; 0x336 <led_Init+0x16>
 32a:	08 95       	ret
 32c:	80 34       	cpi	r24, 0x40	; 64
 32e:	c9 f0       	breq	.+50     	; 0x362 <led_Init+0x42>
 330:	80 38       	cpi	r24, 0x80	; 128
 332:	11 f1       	breq	.+68     	; 0x378 <led_Init+0x58>
 334:	08 95       	ret
	{
		case LED0 :
		Av_gpioPinDirection(LED_PORT,LED0,set_OUT);
 336:	4f ef       	ldi	r20, 0xFF	; 255
 338:	60 e1       	ldi	r22, 0x10	; 16
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 61 00 	call	0xc2	; 0xc2 <Av_gpioPinDirection>
		Av_gpioPinWrite(LED_PORT,LED0,FALSE);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	60 e1       	ldi	r22, 0x10	; 16
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 34a:	08 95       	ret
		case LED1 :
		Av_gpioPinDirection(LED_PORT,LED1,set_OUT);
 34c:	4f ef       	ldi	r20, 0xFF	; 255
 34e:	60 e2       	ldi	r22, 0x20	; 32
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 61 00 	call	0xc2	; 0xc2 <Av_gpioPinDirection>
		Av_gpioPinWrite(LED_PORT,LED1,FALSE);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	60 e2       	ldi	r22, 0x20	; 32
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 360:	08 95       	ret
		case LED2 :
		Av_gpioPinDirection(LED_PORT,LED2,set_OUT);
 362:	4f ef       	ldi	r20, 0xFF	; 255
 364:	60 e4       	ldi	r22, 0x40	; 64
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 61 00 	call	0xc2	; 0xc2 <Av_gpioPinDirection>
		Av_gpioPinWrite(LED_PORT,LED2,FALSE);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	60 e4       	ldi	r22, 0x40	; 64
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 376:	08 95       	ret
		case LED3 :
		Av_gpioPinDirection(LED_PORT,LED3,set_OUT);
 378:	4f ef       	ldi	r20, 0xFF	; 255
 37a:	60 e8       	ldi	r22, 0x80	; 128
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 61 00 	call	0xc2	; 0xc2 <Av_gpioPinDirection>
		Av_gpioPinWrite(LED_PORT,LED3,FALSE);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	60 e8       	ldi	r22, 0x80	; 128
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 38c:	08 95       	ret

0000038e <led_On>:
 * Description: Function to set the Led to On
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3]
 */
void led_On(led led_Num)
{
	switch(led_Num)
 38e:	80 32       	cpi	r24, 0x20	; 32
 390:	79 f0       	breq	.+30     	; 0x3b0 <led_On+0x22>
 392:	18 f4       	brcc	.+6      	; 0x39a <led_On+0xc>
 394:	80 31       	cpi	r24, 0x10	; 16
 396:	31 f0       	breq	.+12     	; 0x3a4 <led_On+0x16>
 398:	08 95       	ret
 39a:	80 34       	cpi	r24, 0x40	; 64
 39c:	79 f0       	breq	.+30     	; 0x3bc <led_On+0x2e>
 39e:	80 38       	cpi	r24, 0x80	; 128
 3a0:	99 f0       	breq	.+38     	; 0x3c8 <led_On+0x3a>
 3a2:	08 95       	ret
	{
		case LED0 :
		Av_gpioPinWrite(LED_PORT,LED0,TRUE);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	60 e1       	ldi	r22, 0x10	; 16
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 3ae:	08 95       	ret
		case LED1 :
		Av_gpioPinWrite(LED_PORT,LED1,TRUE);
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	60 e2       	ldi	r22, 0x20	; 32
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 3ba:	08 95       	ret
		case LED2 :
		Av_gpioPinWrite(LED_PORT,LED2,TRUE);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	60 e4       	ldi	r22, 0x40	; 64
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 3c6:	08 95       	ret
		case LED3 :
		Av_gpioPinWrite(LED_PORT,LED3,TRUE);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	60 e8       	ldi	r22, 0x80	; 128
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 3d2:	08 95       	ret

000003d4 <led_Off>:
 * Description: Function to set the Led to Off.
 * @param led_Num the number of the Led [LED0,LED1,LED2,LED3].
 */
void led_Off(led led_Num)
{
	switch(led_Num)
 3d4:	80 32       	cpi	r24, 0x20	; 32
 3d6:	79 f0       	breq	.+30     	; 0x3f6 <led_Off+0x22>
 3d8:	18 f4       	brcc	.+6      	; 0x3e0 <led_Off+0xc>
 3da:	80 31       	cpi	r24, 0x10	; 16
 3dc:	31 f0       	breq	.+12     	; 0x3ea <led_Off+0x16>
 3de:	08 95       	ret
 3e0:	80 34       	cpi	r24, 0x40	; 64
 3e2:	79 f0       	breq	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e4:	80 38       	cpi	r24, 0x80	; 128
 3e6:	99 f0       	breq	.+38     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3e8:	08 95       	ret
	{
		case LED0 :
		Av_gpioPinWrite(LED_PORT,LED0,FALSE);
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	60 e1       	ldi	r22, 0x10	; 16
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 3f4:	08 95       	ret
		case LED1 :
		Av_gpioPinWrite(LED_PORT,LED1,FALSE);
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	60 e2       	ldi	r22, 0x20	; 32
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 400:	08 95       	ret
		case LED2 :
		Av_gpioPinWrite(LED_PORT,LED2,FALSE);
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	60 e4       	ldi	r22, 0x40	; 64
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
		break;
 40c:	08 95       	ret
		case LED3 :
		Av_gpioPinWrite(LED_PORT,LED3,FALSE);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	60 e8       	ldi	r22, 0x80	; 128
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 418:	08 95       	ret

0000041a <MOTOR_FORWARD>:
void MOTOR_STOP(void)
{
	Av_gpioPinWrite(myPORTA , BIT4 , LOW);
	Av_gpioPinWrite(myPORTA , BIT5 , LOW);
	Av_gpioPinWrite(myPORTA , BIT6 , LOW);
	Av_gpioPinWrite(myPORTA , BIT7 , LOW);
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	60 e1       	ldi	r22, 0x10	; 16
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	60 e2       	ldi	r22, 0x20	; 32
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	60 e4       	ldi	r22, 0x40	; 64
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	60 e8       	ldi	r22, 0x80	; 128
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 442:	08 95       	ret

00000444 <MOTOR_ROTATE>:
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	60 e1       	ldi	r22, 0x10	; 16
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	60 e2       	ldi	r22, 0x20	; 32
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	60 e4       	ldi	r22, 0x40	; 64
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	60 e8       	ldi	r22, 0x80	; 128
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 a1 00 	call	0x142	; 0x142 <Av_gpioPinWrite>
 46c:	08 95       	ret

0000046e <main>:
}

int main(void)
{
	uint16 distance = 50;
	Av_gpioPortDirection(myPORTA,set_OUT); // setting PORTA to be all output   
 46e:	6f ef       	ldi	r22, 0xFF	; 255
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 51 00 	call	0xa2	; 0xa2 <Av_gpioPortDirection>
	Av_gpioPortDirection(myPORTC,set_OUT);	// setting PORTC to be all output
 476:	6f ef       	ldi	r22, 0xFF	; 255
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 51 00 	call	0xa2	; 0xa2 <Av_gpioPortDirection>
	
	Av_gpioPinDirection(myPORTD,BIT2,set_IN);
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	64 e0       	ldi	r22, 0x04	; 4
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	0e 94 61 00 	call	0xc2	; 0xc2 <Av_gpioPinDirection>
	Av_gpioPinDirection(myPORTD,BIT5,set_OUT);
 488:	4f ef       	ldi	r20, 0xFF	; 255
 48a:	60 e2       	ldi	r22, 0x20	; 32
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	0e 94 61 00 	call	0xc2	; 0xc2 <Av_gpioPinDirection>
	
	led_Init(LED0);
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	0e 94 90 01 	call	0x320	; 0x320 <led_Init>
	led_Init(LED1);
 498:	80 e2       	ldi	r24, 0x20	; 32
 49a:	0e 94 90 01 	call	0x320	; 0x320 <led_Init>
	
	Av_ICU_Init();
 49e:	0e 94 67 01 	call	0x2ce	; 0x2ce <Av_ICU_Init>
	
	Av_timer1Init(T1_PWM_PhaseCorrect_ICR1_MODE,T1_OC1A_CLEAR,T1_PRESCALER_1024,0,0,0,0,T1_POLLING);
 4a2:	a1 2c       	mov	r10, r1
 4a4:	c1 2c       	mov	r12, r1
 4a6:	d1 2c       	mov	r13, r1
 4a8:	e1 2c       	mov	r14, r1
 4aa:	00 e0       	ldi	r16, 0x00	; 0
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	45 e0       	ldi	r20, 0x05	; 5
 4b2:	60 e8       	ldi	r22, 0x80	; 128
 4b4:	82 e1       	ldi	r24, 0x12	; 18
 4b6:	0e 94 08 03 	call	0x610	; 0x610 <Av_timer1Init>
	Av_timer1Start();
 4ba:	0e 94 59 03 	call	0x6b2	; 0x6b2 <Av_timer1Start>
	AVE_timer1PWM(50,500);
 4be:	64 ef       	ldi	r22, 0xF4	; 244
 4c0:	71 e0       	ldi	r23, 0x01	; 1
 4c2:	82 e3       	ldi	r24, 0x32	; 50
 4c4:	0e 94 b8 03 	call	0x770	; 0x770 <AVE_timer1PWM>
	
/* Initializing the timer zero using linking configuration */
	Timer_Init(&cfg_s);
 4c8:	81 e6       	ldi	r24, 0x61	; 97
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 9a 02 	call	0x534	; 0x534 <Timer_Init>
	Timer_Start(TIMER0);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Timer_Start>
	
	while (1) 
    {
		Av_UltraSonicTrigger();
 4d6:	0e 94 82 01 	call	0x304	; 0x304 <Av_UltraSonicTrigger>
		distance = Av_UltraSonicDistanc();
 4da:	0e 94 46 01 	call	0x28c	; 0x28c <Av_UltraSonicDistanc>
		
		if(distance < 30)
 4de:	6e 31       	cpi	r22, 0x1E	; 30
 4e0:	71 05       	cpc	r23, r1
 4e2:	b8 f4       	brcc	.+46     	; 0x512 <main+0xa4>
		{
			AVE_timer1PWM(50,500); // Slowing down the speed while rotating
 4e4:	64 ef       	ldi	r22, 0xF4	; 244
 4e6:	71 e0       	ldi	r23, 0x01	; 1
 4e8:	82 e3       	ldi	r24, 0x32	; 50
 4ea:	0e 94 b8 03 	call	0x770	; 0x770 <AVE_timer1PWM>
			MOTOR_ROTATE();
 4ee:	0e 94 22 02 	call	0x444	; 0x444 <MOTOR_ROTATE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	81 ee       	ldi	r24, 0xE1	; 225
 4f6:	94 e0       	ldi	r25, 0x04	; 4
 4f8:	21 50       	subi	r18, 0x01	; 1
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	90 40       	sbci	r25, 0x00	; 0
 4fe:	e1 f7       	brne	.-8      	; 0x4f8 <main+0x8a>
 500:	00 c0       	rjmp	.+0      	; 0x502 <main+0x94>
 502:	00 00       	nop
			_delay_ms(200);
			led_On(LED0);
 504:	80 e1       	ldi	r24, 0x10	; 16
 506:	0e 94 c7 01 	call	0x38e	; 0x38e <led_On>
			led_Off(LED1);
 50a:	80 e2       	ldi	r24, 0x20	; 32
 50c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <led_Off>
 510:	e2 cf       	rjmp	.-60     	; 0x4d6 <main+0x68>
		}
		else if(distance > 30)
 512:	6f 31       	cpi	r22, 0x1F	; 31
 514:	71 05       	cpc	r23, r1
 516:	f8 f2       	brcs	.-66     	; 0x4d6 <main+0x68>
		{
			AVE_timer1PWM(100,500);
 518:	64 ef       	ldi	r22, 0xF4	; 244
 51a:	71 e0       	ldi	r23, 0x01	; 1
 51c:	84 e6       	ldi	r24, 0x64	; 100
 51e:	0e 94 b8 03 	call	0x770	; 0x770 <AVE_timer1PWM>
			MOTOR_FORWARD();
 522:	0e 94 0d 02 	call	0x41a	; 0x41a <MOTOR_FORWARD>
			led_Off(LED0);
 526:	80 e1       	ldi	r24, 0x10	; 16
 528:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <led_Off>
			led_On(LED1);
 52c:	80 e2       	ldi	r24, 0x20	; 32
 52e:	0e 94 c7 01 	call	0x38e	; 0x38e <led_On>
 532:	d1 cf       	rjmp	.-94     	; 0x4d6 <main+0x68>

00000534 <Timer_Init>:
	while(1)
	{
		Av_gpioPinWrite(swPWM2_PORT,swPWM2_PIN,TRUE);
		Av_timer2Delay_ns(time_On_ns);
		Av_gpioPinWrite(swPWM2_PORT,swPWM2_PIN,FALSE);
		Av_timer2Delay_ns(time_Off_ns);
 534:	fc 01       	movw	r30, r24
 536:	85 81       	ldd	r24, Z+5	; 0x05
 538:	96 81       	ldd	r25, Z+6	; 0x06
 53a:	a7 81       	ldd	r26, Z+7	; 0x07
 53c:	b0 85       	ldd	r27, Z+8	; 0x08
 53e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gv_F_CPU>
 542:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <gv_F_CPU+0x1>
 546:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <gv_F_CPU+0x2>
 54a:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <gv_F_CPU+0x3>
 54e:	80 81       	ld	r24, Z
 550:	81 11       	cpse	r24, r1
 552:	52 c0       	rjmp	.+164    	; 0x5f8 <Timer_Init+0xc4>
 554:	23 b7       	in	r18, 0x33	; 51
 556:	91 81       	ldd	r25, Z+1	; 0x01
 558:	92 2b       	or	r25, r18
 55a:	93 bf       	out	0x33, r25	; 51
 55c:	29 b7       	in	r18, 0x39	; 57
 55e:	94 81       	ldd	r25, Z+4	; 0x04
 560:	92 2b       	or	r25, r18
 562:	99 bf       	out	0x39, r25	; 57
 564:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 568:	92 30       	cpi	r25, 0x02	; 2
 56a:	c1 f0       	breq	.+48     	; 0x59c <Timer_Init+0x68>
 56c:	28 f4       	brcc	.+10     	; 0x578 <Timer_Init+0x44>
 56e:	99 23       	and	r25, r25
 570:	49 f0       	breq	.+18     	; 0x584 <Timer_Init+0x50>
 572:	91 30       	cpi	r25, 0x01	; 1
 574:	61 f0       	breq	.+24     	; 0x58e <Timer_Init+0x5a>
 576:	2d c0       	rjmp	.+90     	; 0x5d2 <Timer_Init+0x9e>
 578:	94 30       	cpi	r25, 0x04	; 4
 57a:	f1 f0       	breq	.+60     	; 0x5b8 <Timer_Init+0x84>
 57c:	b0 f0       	brcs	.+44     	; 0x5aa <Timer_Init+0x76>
 57e:	95 30       	cpi	r25, 0x05	; 5
 580:	11 f1       	breq	.+68     	; 0x5c6 <Timer_Init+0x92>
 582:	27 c0       	rjmp	.+78     	; 0x5d2 <Timer_Init+0x9e>
 584:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <preScaller_TIMER0+0x1>
 588:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <preScaller_TIMER0>
 58c:	22 c0       	rjmp	.+68     	; 0x5d2 <Timer_Init+0x9e>
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <preScaller_TIMER0+0x1>
 596:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <preScaller_TIMER0>
 59a:	1b c0       	rjmp	.+54     	; 0x5d2 <Timer_Init+0x9e>
 59c:	28 e0       	ldi	r18, 0x08	; 8
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <preScaller_TIMER0+0x1>
 5a4:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <preScaller_TIMER0>
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <Timer_Init+0x9e>
 5aa:	20 e4       	ldi	r18, 0x40	; 64
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <preScaller_TIMER0+0x1>
 5b2:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <preScaller_TIMER0>
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <Timer_Init+0x9e>
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	31 e0       	ldi	r19, 0x01	; 1
 5bc:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <preScaller_TIMER0+0x1>
 5c0:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <preScaller_TIMER0>
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <Timer_Init+0x9e>
 5c6:	20 e0       	ldi	r18, 0x00	; 0
 5c8:	34 e0       	ldi	r19, 0x04	; 4
 5ca:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <preScaller_TIMER0+0x1>
 5ce:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <preScaller_TIMER0>
 5d2:	22 81       	ldd	r18, Z+2	; 0x02
 5d4:	33 81       	ldd	r19, Z+3	; 0x03
 5d6:	22 0f       	add	r18, r18
 5d8:	23 2f       	mov	r18, r19
 5da:	22 1f       	adc	r18, r18
 5dc:	33 0b       	sbc	r19, r19
 5de:	31 95       	neg	r19
 5e0:	2f 3f       	cpi	r18, 0xFF	; 255
 5e2:	31 05       	cpc	r19, r1
 5e4:	50 f4       	brcc	.+20     	; 0x5fa <Timer_Init+0xc6>
 5e6:	89 e0       	ldi	r24, 0x09	; 9
 5e8:	82 1b       	sub	r24, r18
 5ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <gv_Count>
 5ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gv_Count>
 5f2:	82 bf       	out	0x32, r24	; 50
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	08 95       	ret
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	08 95       	ret

000005fc <Timer_Start>:
 5fc:	81 11       	cpse	r24, r1
 5fe:	06 c0       	rjmp	.+12     	; 0x60c <Timer_Start+0x10>
 600:	83 b7       	in	r24, 0x33	; 51
 602:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 606:	88 7f       	andi	r24, 0xF8	; 248
 608:	89 2b       	or	r24, r25
 60a:	83 bf       	out	0x33, r24	; 51
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	08 95       	ret

00000610 <Av_timer1Init>:
 610:	af 92       	push	r10
 612:	ef 92       	push	r14
 614:	0f 93       	push	r16
 616:	9f b5       	in	r25, 0x2f	; 47
 618:	58 2f       	mov	r21, r24
 61a:	53 70       	andi	r21, 0x03	; 3
 61c:	95 2b       	or	r25, r21
 61e:	9f bd       	out	0x2f, r25	; 47
 620:	9f b5       	in	r25, 0x2f	; 47
 622:	69 2b       	or	r22, r25
 624:	6f bd       	out	0x2f, r22	; 47
 626:	9e b5       	in	r25, 0x2e	; 46
 628:	88 71       	andi	r24, 0x18	; 24
 62a:	89 2b       	or	r24, r25
 62c:	8e bd       	out	0x2e, r24	; 46
 62e:	3d bd       	out	0x2d, r19	; 45
 630:	2c bd       	out	0x2c, r18	; 44
 632:	0a bd       	out	0x2a, r16	; 42
 634:	eb bc       	out	0x2b, r14	; 43
 636:	89 b7       	in	r24, 0x39	; 57
 638:	a8 2a       	or	r10, r24
 63a:	a9 be       	out	0x39, r10	; 57
 63c:	40 93 75 00 	sts	0x0075, r20	; 0x800075 <prescaller1>
 640:	42 30       	cpi	r20, 0x02	; 2
 642:	c1 f0       	breq	.+48     	; 0x674 <Av_timer1Init+0x64>
 644:	28 f4       	brcc	.+10     	; 0x650 <Av_timer1Init+0x40>
 646:	44 23       	and	r20, r20
 648:	49 f0       	breq	.+18     	; 0x65c <Av_timer1Init+0x4c>
 64a:	41 30       	cpi	r20, 0x01	; 1
 64c:	61 f0       	breq	.+24     	; 0x666 <Av_timer1Init+0x56>
 64e:	2d c0       	rjmp	.+90     	; 0x6aa <Av_timer1Init+0x9a>
 650:	44 30       	cpi	r20, 0x04	; 4
 652:	f1 f0       	breq	.+60     	; 0x690 <Av_timer1Init+0x80>
 654:	b0 f0       	brcs	.+44     	; 0x682 <Av_timer1Init+0x72>
 656:	45 30       	cpi	r20, 0x05	; 5
 658:	11 f1       	breq	.+68     	; 0x69e <Av_timer1Init+0x8e>
 65a:	27 c0       	rjmp	.+78     	; 0x6aa <Av_timer1Init+0x9a>
 65c:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <preScaller_TIMER1+0x1>
 660:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <preScaller_TIMER1>
 664:	22 c0       	rjmp	.+68     	; 0x6aa <Av_timer1Init+0x9a>
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <preScaller_TIMER1+0x1>
 66e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <preScaller_TIMER1>
 672:	1b c0       	rjmp	.+54     	; 0x6aa <Av_timer1Init+0x9a>
 674:	88 e0       	ldi	r24, 0x08	; 8
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <preScaller_TIMER1+0x1>
 67c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <preScaller_TIMER1>
 680:	14 c0       	rjmp	.+40     	; 0x6aa <Av_timer1Init+0x9a>
 682:	80 e4       	ldi	r24, 0x40	; 64
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <preScaller_TIMER1+0x1>
 68a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <preScaller_TIMER1>
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <Av_timer1Init+0x9a>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	91 e0       	ldi	r25, 0x01	; 1
 694:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <preScaller_TIMER1+0x1>
 698:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <preScaller_TIMER1>
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <Av_timer1Init+0x9a>
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	94 e0       	ldi	r25, 0x04	; 4
 6a2:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <preScaller_TIMER1+0x1>
 6a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <preScaller_TIMER1>
 6aa:	0f 91       	pop	r16
 6ac:	ef 90       	pop	r14
 6ae:	af 90       	pop	r10
 6b0:	08 95       	ret

000006b2 <Av_timer1Start>:
 6b2:	8e b5       	in	r24, 0x2e	; 46
 6b4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <prescaller1>
 6b8:	88 7f       	andi	r24, 0xF8	; 248
 6ba:	89 2b       	or	r24, r25
 6bc:	8e bd       	out	0x2e, r24	; 46
 6be:	08 95       	ret

000006c0 <Av_timer1Stop>:
 6c0:	8e b5       	in	r24, 0x2e	; 46
 6c2:	88 7f       	andi	r24, 0xF8	; 248
 6c4:	8e bd       	out	0x2e, r24	; 46
 6c6:	08 95       	ret

000006c8 <Av_timer2Init>:
 6c8:	ef 92       	push	r14
 6ca:	0f 93       	push	r16
 6cc:	95 b5       	in	r25, 0x25	; 37
 6ce:	69 2b       	or	r22, r25
 6d0:	86 2b       	or	r24, r22
 6d2:	85 bd       	out	0x25, r24	; 37
 6d4:	24 bd       	out	0x24, r18	; 36
 6d6:	03 bd       	out	0x23, r16	; 35
 6d8:	89 b7       	in	r24, 0x39	; 57
 6da:	e8 2a       	or	r14, r24
 6dc:	e9 be       	out	0x39, r14	; 57
 6de:	40 93 74 00 	sts	0x0074, r20	; 0x800074 <prescaller2>
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	48 30       	cpi	r20, 0x08	; 8
 6e6:	51 05       	cpc	r21, r1
 6e8:	d0 f5       	brcc	.+116    	; 0x75e <Av_timer2Init+0x96>
 6ea:	fa 01       	movw	r30, r20
 6ec:	e6 5d       	subi	r30, 0xD6	; 214
 6ee:	ff 4f       	sbci	r31, 0xFF	; 255
 6f0:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__tablejump2__>
 6f4:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <preScaller_TIMER2+0x1>
 6f8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <preScaller_TIMER2>
 6fc:	30 c0       	rjmp	.+96     	; 0x75e <Av_timer2Init+0x96>
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <preScaller_TIMER2+0x1>
 706:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <preScaller_TIMER2>
 70a:	29 c0       	rjmp	.+82     	; 0x75e <Av_timer2Init+0x96>
 70c:	88 e0       	ldi	r24, 0x08	; 8
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <preScaller_TIMER2+0x1>
 714:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <preScaller_TIMER2>
 718:	22 c0       	rjmp	.+68     	; 0x75e <Av_timer2Init+0x96>
 71a:	80 e2       	ldi	r24, 0x20	; 32
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <preScaller_TIMER2+0x1>
 722:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <preScaller_TIMER2>
 726:	1b c0       	rjmp	.+54     	; 0x75e <Av_timer2Init+0x96>
 728:	80 e4       	ldi	r24, 0x40	; 64
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <preScaller_TIMER2+0x1>
 730:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <preScaller_TIMER2>
 734:	14 c0       	rjmp	.+40     	; 0x75e <Av_timer2Init+0x96>
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <preScaller_TIMER2+0x1>
 73e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <preScaller_TIMER2>
 742:	0d c0       	rjmp	.+26     	; 0x75e <Av_timer2Init+0x96>
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <preScaller_TIMER2+0x1>
 74c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <preScaller_TIMER2>
 750:	06 c0       	rjmp	.+12     	; 0x75e <Av_timer2Init+0x96>
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	94 e0       	ldi	r25, 0x04	; 4
 756:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <preScaller_TIMER2+0x1>
 75a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <preScaller_TIMER2>
 75e:	0f 91       	pop	r16
 760:	ef 90       	pop	r14
 762:	08 95       	ret

00000764 <Av_timer2Start>:
 764:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <prescaller2>
 768:	85 b5       	in	r24, 0x25	; 37
 76a:	89 2b       	or	r24, r25
 76c:	85 bd       	out	0x25, r24	; 37
 76e:	08 95       	ret

00000770 <AVE_timer1PWM>:
	}
}



void AVE_timer1PWM(uint8 dutycycle , uint16 freq ){
 770:	cf 92       	push	r12
 772:	df 92       	push	r13
 774:	ef 92       	push	r14
 776:	ff 92       	push	r15
 778:	cf 93       	push	r28
 77a:	c8 2f       	mov	r28, r24
	// in ms
	uint32 TOP_Value;
	uint32 Compare_Value;
	TOP_Value=(F_CPU/(2*freq*1024));
 77c:	20 e0       	ldi	r18, 0x00	; 0
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	36 2f       	mov	r19, r22
 782:	33 0f       	add	r19, r19
 784:	33 0f       	add	r19, r19
 786:	33 0f       	add	r19, r19
 788:	40 e0       	ldi	r20, 0x00	; 0
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	72 e1       	ldi	r23, 0x12	; 18
 790:	8a e7       	ldi	r24, 0x7A	; 122
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 87 05 	call	0xb0e	; 0xb0e <__udivmodsi4>
 798:	69 01       	movw	r12, r18
 79a:	7a 01       	movw	r14, r20
	Compare_Value=(TOP_Value*dutycycle)/100;
 79c:	ac 2f       	mov	r26, r28
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__muluhisi3>
 7a4:	24 e6       	ldi	r18, 0x64	; 100
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	0e 94 87 05 	call	0xb0e	; 0xb0e <__udivmodsi4>
	ICR1H=(uint8)(TOP_Value>>8);
 7b0:	bb 27       	eor	r27, r27
 7b2:	af 2d       	mov	r26, r15
 7b4:	9e 2d       	mov	r25, r14
 7b6:	8d 2d       	mov	r24, r13
 7b8:	87 bd       	out	0x27, r24	; 39
	ICR1L=(uint8)(TOP_Value);
 7ba:	c6 bc       	out	0x26, r12	; 38
	OCR1AH=(uint8)(Compare_Value>>8);
 7bc:	bb 27       	eor	r27, r27
 7be:	a5 2f       	mov	r26, r21
 7c0:	94 2f       	mov	r25, r20
 7c2:	83 2f       	mov	r24, r19
 7c4:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=(uint8)(Compare_Value);
 7c6:	2a bd       	out	0x2a, r18	; 42
 7c8:	cf 91       	pop	r28
 7ca:	ff 90       	pop	r15
 7cc:	ef 90       	pop	r14
 7ce:	df 90       	pop	r13
 7d0:	cf 90       	pop	r12
 7d2:	08 95       	ret

000007d4 <__divsf3>:
 7d4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__divsf3x>
 7d8:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_round>
 7dc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__fp_pscB>
 7e0:	58 f0       	brcs	.+22     	; 0x7f8 <__divsf3+0x24>
 7e2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_pscA>
 7e6:	40 f0       	brcs	.+16     	; 0x7f8 <__divsf3+0x24>
 7e8:	29 f4       	brne	.+10     	; 0x7f4 <__divsf3+0x20>
 7ea:	5f 3f       	cpi	r21, 0xFF	; 255
 7ec:	29 f0       	breq	.+10     	; 0x7f8 <__divsf3+0x24>
 7ee:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_inf>
 7f2:	51 11       	cpse	r21, r1
 7f4:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_szero>
 7f8:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_nan>

000007fc <__divsf3x>:
 7fc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_split3>
 800:	68 f3       	brcs	.-38     	; 0x7dc <__divsf3+0x8>

00000802 <__divsf3_pse>:
 802:	99 23       	and	r25, r25
 804:	b1 f3       	breq	.-20     	; 0x7f2 <__divsf3+0x1e>
 806:	55 23       	and	r21, r21
 808:	91 f3       	breq	.-28     	; 0x7ee <__divsf3+0x1a>
 80a:	95 1b       	sub	r25, r21
 80c:	55 0b       	sbc	r21, r21
 80e:	bb 27       	eor	r27, r27
 810:	aa 27       	eor	r26, r26
 812:	62 17       	cp	r22, r18
 814:	73 07       	cpc	r23, r19
 816:	84 07       	cpc	r24, r20
 818:	38 f0       	brcs	.+14     	; 0x828 <__divsf3_pse+0x26>
 81a:	9f 5f       	subi	r25, 0xFF	; 255
 81c:	5f 4f       	sbci	r21, 0xFF	; 255
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	44 1f       	adc	r20, r20
 824:	aa 1f       	adc	r26, r26
 826:	a9 f3       	breq	.-22     	; 0x812 <__divsf3_pse+0x10>
 828:	35 d0       	rcall	.+106    	; 0x894 <__stack+0x35>
 82a:	0e 2e       	mov	r0, r30
 82c:	3a f0       	brmi	.+14     	; 0x83c <__divsf3_pse+0x3a>
 82e:	e0 e8       	ldi	r30, 0x80	; 128
 830:	32 d0       	rcall	.+100    	; 0x896 <__stack+0x37>
 832:	91 50       	subi	r25, 0x01	; 1
 834:	50 40       	sbci	r21, 0x00	; 0
 836:	e6 95       	lsr	r30
 838:	00 1c       	adc	r0, r0
 83a:	ca f7       	brpl	.-14     	; 0x82e <__divsf3_pse+0x2c>
 83c:	2b d0       	rcall	.+86     	; 0x894 <__stack+0x35>
 83e:	fe 2f       	mov	r31, r30
 840:	29 d0       	rcall	.+82     	; 0x894 <__stack+0x35>
 842:	66 0f       	add	r22, r22
 844:	77 1f       	adc	r23, r23
 846:	88 1f       	adc	r24, r24
 848:	bb 1f       	adc	r27, r27
 84a:	26 17       	cp	r18, r22
 84c:	37 07       	cpc	r19, r23
 84e:	48 07       	cpc	r20, r24
 850:	ab 07       	cpc	r26, r27
 852:	b0 e8       	ldi	r27, 0x80	; 128
 854:	09 f0       	breq	.+2      	; 0x858 <__divsf3_pse+0x56>
 856:	bb 0b       	sbc	r27, r27
 858:	80 2d       	mov	r24, r0
 85a:	bf 01       	movw	r22, r30
 85c:	ff 27       	eor	r31, r31
 85e:	93 58       	subi	r25, 0x83	; 131
 860:	5f 4f       	sbci	r21, 0xFF	; 255
 862:	3a f0       	brmi	.+14     	; 0x872 <__stack+0x13>
 864:	9e 3f       	cpi	r25, 0xFE	; 254
 866:	51 05       	cpc	r21, r1
 868:	78 f0       	brcs	.+30     	; 0x888 <__stack+0x29>
 86a:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_inf>
 86e:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_szero>
 872:	5f 3f       	cpi	r21, 0xFF	; 255
 874:	e4 f3       	brlt	.-8      	; 0x86e <__stack+0xf>
 876:	98 3e       	cpi	r25, 0xE8	; 232
 878:	d4 f3       	brlt	.-12     	; 0x86e <__stack+0xf>
 87a:	86 95       	lsr	r24
 87c:	77 95       	ror	r23
 87e:	67 95       	ror	r22
 880:	b7 95       	ror	r27
 882:	f7 95       	ror	r31
 884:	9f 5f       	subi	r25, 0xFF	; 255
 886:	c9 f7       	brne	.-14     	; 0x87a <__stack+0x1b>
 888:	88 0f       	add	r24, r24
 88a:	91 1d       	adc	r25, r1
 88c:	96 95       	lsr	r25
 88e:	87 95       	ror	r24
 890:	97 f9       	bld	r25, 7
 892:	08 95       	ret
 894:	e1 e0       	ldi	r30, 0x01	; 1
 896:	66 0f       	add	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	bb 1f       	adc	r27, r27
 89e:	62 17       	cp	r22, r18
 8a0:	73 07       	cpc	r23, r19
 8a2:	84 07       	cpc	r24, r20
 8a4:	ba 07       	cpc	r27, r26
 8a6:	20 f0       	brcs	.+8      	; 0x8b0 <__stack+0x51>
 8a8:	62 1b       	sub	r22, r18
 8aa:	73 0b       	sbc	r23, r19
 8ac:	84 0b       	sbc	r24, r20
 8ae:	ba 0b       	sbc	r27, r26
 8b0:	ee 1f       	adc	r30, r30
 8b2:	88 f7       	brcc	.-30     	; 0x896 <__stack+0x37>
 8b4:	e0 95       	com	r30
 8b6:	08 95       	ret

000008b8 <__fixunssfsi>:
 8b8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fp_splitA>
 8bc:	88 f0       	brcs	.+34     	; 0x8e0 <__fixunssfsi+0x28>
 8be:	9f 57       	subi	r25, 0x7F	; 127
 8c0:	98 f0       	brcs	.+38     	; 0x8e8 <__fixunssfsi+0x30>
 8c2:	b9 2f       	mov	r27, r25
 8c4:	99 27       	eor	r25, r25
 8c6:	b7 51       	subi	r27, 0x17	; 23
 8c8:	b0 f0       	brcs	.+44     	; 0x8f6 <__fixunssfsi+0x3e>
 8ca:	e1 f0       	breq	.+56     	; 0x904 <__fixunssfsi+0x4c>
 8cc:	66 0f       	add	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 1f       	adc	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	1a f0       	brmi	.+6      	; 0x8dc <__fixunssfsi+0x24>
 8d6:	ba 95       	dec	r27
 8d8:	c9 f7       	brne	.-14     	; 0x8cc <__fixunssfsi+0x14>
 8da:	14 c0       	rjmp	.+40     	; 0x904 <__fixunssfsi+0x4c>
 8dc:	b1 30       	cpi	r27, 0x01	; 1
 8de:	91 f0       	breq	.+36     	; 0x904 <__fixunssfsi+0x4c>
 8e0:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_zero>
 8e4:	b1 e0       	ldi	r27, 0x01	; 1
 8e6:	08 95       	ret
 8e8:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__fp_zero>
 8ec:	67 2f       	mov	r22, r23
 8ee:	78 2f       	mov	r23, r24
 8f0:	88 27       	eor	r24, r24
 8f2:	b8 5f       	subi	r27, 0xF8	; 248
 8f4:	39 f0       	breq	.+14     	; 0x904 <__fixunssfsi+0x4c>
 8f6:	b9 3f       	cpi	r27, 0xF9	; 249
 8f8:	cc f3       	brlt	.-14     	; 0x8ec <__fixunssfsi+0x34>
 8fa:	86 95       	lsr	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	b3 95       	inc	r27
 902:	d9 f7       	brne	.-10     	; 0x8fa <__fixunssfsi+0x42>
 904:	3e f4       	brtc	.+14     	; 0x914 <__fixunssfsi+0x5c>
 906:	90 95       	com	r25
 908:	80 95       	com	r24
 90a:	70 95       	com	r23
 90c:	61 95       	neg	r22
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	08 95       	ret

00000916 <__floatundisf>:
 916:	e8 94       	clt

00000918 <__fp_di2sf>:
 918:	f9 2f       	mov	r31, r25
 91a:	96 eb       	ldi	r25, 0xB6	; 182
 91c:	ff 23       	and	r31, r31
 91e:	81 f0       	breq	.+32     	; 0x940 <__fp_di2sf+0x28>
 920:	12 16       	cp	r1, r18
 922:	13 06       	cpc	r1, r19
 924:	14 06       	cpc	r1, r20
 926:	44 0b       	sbc	r20, r20
 928:	93 95       	inc	r25
 92a:	f6 95       	lsr	r31
 92c:	87 95       	ror	r24
 92e:	77 95       	ror	r23
 930:	67 95       	ror	r22
 932:	57 95       	ror	r21
 934:	40 40       	sbci	r20, 0x00	; 0
 936:	ff 23       	and	r31, r31
 938:	b9 f7       	brne	.-18     	; 0x928 <__fp_di2sf+0x10>
 93a:	1b c0       	rjmp	.+54     	; 0x972 <__fp_di2sf+0x5a>
 93c:	99 27       	eor	r25, r25
 93e:	08 95       	ret
 940:	88 23       	and	r24, r24
 942:	51 f4       	brne	.+20     	; 0x958 <__fp_di2sf+0x40>
 944:	98 50       	subi	r25, 0x08	; 8
 946:	d2 f7       	brpl	.-12     	; 0x93c <__fp_di2sf+0x24>
 948:	87 2b       	or	r24, r23
 94a:	76 2f       	mov	r23, r22
 94c:	65 2f       	mov	r22, r21
 94e:	54 2f       	mov	r21, r20
 950:	43 2f       	mov	r20, r19
 952:	32 2f       	mov	r19, r18
 954:	20 e0       	ldi	r18, 0x00	; 0
 956:	b1 f3       	breq	.-20     	; 0x944 <__fp_di2sf+0x2c>
 958:	12 16       	cp	r1, r18
 95a:	13 06       	cpc	r1, r19
 95c:	14 06       	cpc	r1, r20
 95e:	44 0b       	sbc	r20, r20
 960:	88 23       	and	r24, r24
 962:	3a f0       	brmi	.+14     	; 0x972 <__fp_di2sf+0x5a>
 964:	9a 95       	dec	r25
 966:	44 0f       	add	r20, r20
 968:	55 1f       	adc	r21, r21
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	ca f7       	brpl	.-14     	; 0x964 <__fp_di2sf+0x4c>
 972:	55 23       	and	r21, r21
 974:	4a f4       	brpl	.+18     	; 0x988 <__fp_di2sf+0x70>
 976:	44 0f       	add	r20, r20
 978:	55 1f       	adc	r21, r21
 97a:	11 f4       	brne	.+4      	; 0x980 <__fp_di2sf+0x68>
 97c:	60 ff       	sbrs	r22, 0
 97e:	04 c0       	rjmp	.+8      	; 0x988 <__fp_di2sf+0x70>
 980:	6f 5f       	subi	r22, 0xFF	; 255
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	88 0f       	add	r24, r24
 98a:	96 95       	lsr	r25
 98c:	87 95       	ror	r24
 98e:	97 f9       	bld	r25, 7
 990:	08 95       	ret

00000992 <__fp_inf>:
 992:	97 f9       	bld	r25, 7
 994:	9f 67       	ori	r25, 0x7F	; 127
 996:	80 e8       	ldi	r24, 0x80	; 128
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	60 e0       	ldi	r22, 0x00	; 0
 99c:	08 95       	ret

0000099e <__fp_nan>:
 99e:	9f ef       	ldi	r25, 0xFF	; 255
 9a0:	80 ec       	ldi	r24, 0xC0	; 192
 9a2:	08 95       	ret

000009a4 <__fp_pscA>:
 9a4:	00 24       	eor	r0, r0
 9a6:	0a 94       	dec	r0
 9a8:	16 16       	cp	r1, r22
 9aa:	17 06       	cpc	r1, r23
 9ac:	18 06       	cpc	r1, r24
 9ae:	09 06       	cpc	r0, r25
 9b0:	08 95       	ret

000009b2 <__fp_pscB>:
 9b2:	00 24       	eor	r0, r0
 9b4:	0a 94       	dec	r0
 9b6:	12 16       	cp	r1, r18
 9b8:	13 06       	cpc	r1, r19
 9ba:	14 06       	cpc	r1, r20
 9bc:	05 06       	cpc	r0, r21
 9be:	08 95       	ret

000009c0 <__fp_round>:
 9c0:	09 2e       	mov	r0, r25
 9c2:	03 94       	inc	r0
 9c4:	00 0c       	add	r0, r0
 9c6:	11 f4       	brne	.+4      	; 0x9cc <__fp_round+0xc>
 9c8:	88 23       	and	r24, r24
 9ca:	52 f0       	brmi	.+20     	; 0x9e0 <__fp_round+0x20>
 9cc:	bb 0f       	add	r27, r27
 9ce:	40 f4       	brcc	.+16     	; 0x9e0 <__fp_round+0x20>
 9d0:	bf 2b       	or	r27, r31
 9d2:	11 f4       	brne	.+4      	; 0x9d8 <__fp_round+0x18>
 9d4:	60 ff       	sbrs	r22, 0
 9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__fp_round+0x20>
 9d8:	6f 5f       	subi	r22, 0xFF	; 255
 9da:	7f 4f       	sbci	r23, 0xFF	; 255
 9dc:	8f 4f       	sbci	r24, 0xFF	; 255
 9de:	9f 4f       	sbci	r25, 0xFF	; 255
 9e0:	08 95       	ret

000009e2 <__fp_split3>:
 9e2:	57 fd       	sbrc	r21, 7
 9e4:	90 58       	subi	r25, 0x80	; 128
 9e6:	44 0f       	add	r20, r20
 9e8:	55 1f       	adc	r21, r21
 9ea:	59 f0       	breq	.+22     	; 0xa02 <__fp_splitA+0x10>
 9ec:	5f 3f       	cpi	r21, 0xFF	; 255
 9ee:	71 f0       	breq	.+28     	; 0xa0c <__fp_splitA+0x1a>
 9f0:	47 95       	ror	r20

000009f2 <__fp_splitA>:
 9f2:	88 0f       	add	r24, r24
 9f4:	97 fb       	bst	r25, 7
 9f6:	99 1f       	adc	r25, r25
 9f8:	61 f0       	breq	.+24     	; 0xa12 <__fp_splitA+0x20>
 9fa:	9f 3f       	cpi	r25, 0xFF	; 255
 9fc:	79 f0       	breq	.+30     	; 0xa1c <__fp_splitA+0x2a>
 9fe:	87 95       	ror	r24
 a00:	08 95       	ret
 a02:	12 16       	cp	r1, r18
 a04:	13 06       	cpc	r1, r19
 a06:	14 06       	cpc	r1, r20
 a08:	55 1f       	adc	r21, r21
 a0a:	f2 cf       	rjmp	.-28     	; 0x9f0 <__fp_split3+0xe>
 a0c:	46 95       	lsr	r20
 a0e:	f1 df       	rcall	.-30     	; 0x9f2 <__fp_splitA>
 a10:	08 c0       	rjmp	.+16     	; 0xa22 <__fp_splitA+0x30>
 a12:	16 16       	cp	r1, r22
 a14:	17 06       	cpc	r1, r23
 a16:	18 06       	cpc	r1, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	f1 cf       	rjmp	.-30     	; 0x9fe <__fp_splitA+0xc>
 a1c:	86 95       	lsr	r24
 a1e:	71 05       	cpc	r23, r1
 a20:	61 05       	cpc	r22, r1
 a22:	08 94       	sec
 a24:	08 95       	ret

00000a26 <__fp_zero>:
 a26:	e8 94       	clt

00000a28 <__fp_szero>:
 a28:	bb 27       	eor	r27, r27
 a2a:	66 27       	eor	r22, r22
 a2c:	77 27       	eor	r23, r23
 a2e:	cb 01       	movw	r24, r22
 a30:	97 f9       	bld	r25, 7
 a32:	08 95       	ret

00000a34 <__mulsf3>:
 a34:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__mulsf3x>
 a38:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_round>
 a3c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fp_pscA>
 a40:	38 f0       	brcs	.+14     	; 0xa50 <__mulsf3+0x1c>
 a42:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__fp_pscB>
 a46:	20 f0       	brcs	.+8      	; 0xa50 <__mulsf3+0x1c>
 a48:	95 23       	and	r25, r21
 a4a:	11 f0       	breq	.+4      	; 0xa50 <__mulsf3+0x1c>
 a4c:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_inf>
 a50:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_nan>
 a54:	11 24       	eor	r1, r1
 a56:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_szero>

00000a5a <__mulsf3x>:
 a5a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_split3>
 a5e:	70 f3       	brcs	.-36     	; 0xa3c <__mulsf3+0x8>

00000a60 <__mulsf3_pse>:
 a60:	95 9f       	mul	r25, r21
 a62:	c1 f3       	breq	.-16     	; 0xa54 <__mulsf3+0x20>
 a64:	95 0f       	add	r25, r21
 a66:	50 e0       	ldi	r21, 0x00	; 0
 a68:	55 1f       	adc	r21, r21
 a6a:	62 9f       	mul	r22, r18
 a6c:	f0 01       	movw	r30, r0
 a6e:	72 9f       	mul	r23, r18
 a70:	bb 27       	eor	r27, r27
 a72:	f0 0d       	add	r31, r0
 a74:	b1 1d       	adc	r27, r1
 a76:	63 9f       	mul	r22, r19
 a78:	aa 27       	eor	r26, r26
 a7a:	f0 0d       	add	r31, r0
 a7c:	b1 1d       	adc	r27, r1
 a7e:	aa 1f       	adc	r26, r26
 a80:	64 9f       	mul	r22, r20
 a82:	66 27       	eor	r22, r22
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	66 1f       	adc	r22, r22
 a8a:	82 9f       	mul	r24, r18
 a8c:	22 27       	eor	r18, r18
 a8e:	b0 0d       	add	r27, r0
 a90:	a1 1d       	adc	r26, r1
 a92:	62 1f       	adc	r22, r18
 a94:	73 9f       	mul	r23, r19
 a96:	b0 0d       	add	r27, r0
 a98:	a1 1d       	adc	r26, r1
 a9a:	62 1f       	adc	r22, r18
 a9c:	83 9f       	mul	r24, r19
 a9e:	a0 0d       	add	r26, r0
 aa0:	61 1d       	adc	r22, r1
 aa2:	22 1f       	adc	r18, r18
 aa4:	74 9f       	mul	r23, r20
 aa6:	33 27       	eor	r19, r19
 aa8:	a0 0d       	add	r26, r0
 aaa:	61 1d       	adc	r22, r1
 aac:	23 1f       	adc	r18, r19
 aae:	84 9f       	mul	r24, r20
 ab0:	60 0d       	add	r22, r0
 ab2:	21 1d       	adc	r18, r1
 ab4:	82 2f       	mov	r24, r18
 ab6:	76 2f       	mov	r23, r22
 ab8:	6a 2f       	mov	r22, r26
 aba:	11 24       	eor	r1, r1
 abc:	9f 57       	subi	r25, 0x7F	; 127
 abe:	50 40       	sbci	r21, 0x00	; 0
 ac0:	9a f0       	brmi	.+38     	; 0xae8 <__mulsf3_pse+0x88>
 ac2:	f1 f0       	breq	.+60     	; 0xb00 <__mulsf3_pse+0xa0>
 ac4:	88 23       	and	r24, r24
 ac6:	4a f0       	brmi	.+18     	; 0xada <__mulsf3_pse+0x7a>
 ac8:	ee 0f       	add	r30, r30
 aca:	ff 1f       	adc	r31, r31
 acc:	bb 1f       	adc	r27, r27
 ace:	66 1f       	adc	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	91 50       	subi	r25, 0x01	; 1
 ad6:	50 40       	sbci	r21, 0x00	; 0
 ad8:	a9 f7       	brne	.-22     	; 0xac4 <__mulsf3_pse+0x64>
 ada:	9e 3f       	cpi	r25, 0xFE	; 254
 adc:	51 05       	cpc	r21, r1
 ade:	80 f0       	brcs	.+32     	; 0xb00 <__mulsf3_pse+0xa0>
 ae0:	0c 94 c9 04 	jmp	0x992	; 0x992 <__fp_inf>
 ae4:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_szero>
 ae8:	5f 3f       	cpi	r21, 0xFF	; 255
 aea:	e4 f3       	brlt	.-8      	; 0xae4 <__mulsf3_pse+0x84>
 aec:	98 3e       	cpi	r25, 0xE8	; 232
 aee:	d4 f3       	brlt	.-12     	; 0xae4 <__mulsf3_pse+0x84>
 af0:	86 95       	lsr	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b7 95       	ror	r27
 af8:	f7 95       	ror	r31
 afa:	e7 95       	ror	r30
 afc:	9f 5f       	subi	r25, 0xFF	; 255
 afe:	c1 f7       	brne	.-16     	; 0xaf0 <__mulsf3_pse+0x90>
 b00:	fe 2b       	or	r31, r30
 b02:	88 0f       	add	r24, r24
 b04:	91 1d       	adc	r25, r1
 b06:	96 95       	lsr	r25
 b08:	87 95       	ror	r24
 b0a:	97 f9       	bld	r25, 7
 b0c:	08 95       	ret

00000b0e <__udivmodsi4>:
 b0e:	a1 e2       	ldi	r26, 0x21	; 33
 b10:	1a 2e       	mov	r1, r26
 b12:	aa 1b       	sub	r26, r26
 b14:	bb 1b       	sub	r27, r27
 b16:	fd 01       	movw	r30, r26
 b18:	0d c0       	rjmp	.+26     	; 0xb34 <__udivmodsi4_ep>

00000b1a <__udivmodsi4_loop>:
 b1a:	aa 1f       	adc	r26, r26
 b1c:	bb 1f       	adc	r27, r27
 b1e:	ee 1f       	adc	r30, r30
 b20:	ff 1f       	adc	r31, r31
 b22:	a2 17       	cp	r26, r18
 b24:	b3 07       	cpc	r27, r19
 b26:	e4 07       	cpc	r30, r20
 b28:	f5 07       	cpc	r31, r21
 b2a:	20 f0       	brcs	.+8      	; 0xb34 <__udivmodsi4_ep>
 b2c:	a2 1b       	sub	r26, r18
 b2e:	b3 0b       	sbc	r27, r19
 b30:	e4 0b       	sbc	r30, r20
 b32:	f5 0b       	sbc	r31, r21

00000b34 <__udivmodsi4_ep>:
 b34:	66 1f       	adc	r22, r22
 b36:	77 1f       	adc	r23, r23
 b38:	88 1f       	adc	r24, r24
 b3a:	99 1f       	adc	r25, r25
 b3c:	1a 94       	dec	r1
 b3e:	69 f7       	brne	.-38     	; 0xb1a <__udivmodsi4_loop>
 b40:	60 95       	com	r22
 b42:	70 95       	com	r23
 b44:	80 95       	com	r24
 b46:	90 95       	com	r25
 b48:	9b 01       	movw	r18, r22
 b4a:	ac 01       	movw	r20, r24
 b4c:	bd 01       	movw	r22, r26
 b4e:	cf 01       	movw	r24, r30
 b50:	08 95       	ret

00000b52 <__tablejump2__>:
 b52:	ee 0f       	add	r30, r30
 b54:	ff 1f       	adc	r31, r31
 b56:	05 90       	lpm	r0, Z+
 b58:	f4 91       	lpm	r31, Z
 b5a:	e0 2d       	mov	r30, r0
 b5c:	09 94       	ijmp

00000b5e <__umulhisi3>:
 b5e:	a2 9f       	mul	r26, r18
 b60:	b0 01       	movw	r22, r0
 b62:	b3 9f       	mul	r27, r19
 b64:	c0 01       	movw	r24, r0
 b66:	a3 9f       	mul	r26, r19
 b68:	70 0d       	add	r23, r0
 b6a:	81 1d       	adc	r24, r1
 b6c:	11 24       	eor	r1, r1
 b6e:	91 1d       	adc	r25, r1
 b70:	b2 9f       	mul	r27, r18
 b72:	70 0d       	add	r23, r0
 b74:	81 1d       	adc	r24, r1
 b76:	11 24       	eor	r1, r1
 b78:	91 1d       	adc	r25, r1
 b7a:	08 95       	ret

00000b7c <__usmulhisi3>:
 b7c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umulhisi3>

00000b80 <__usmulhisi3_tail>:
 b80:	b7 ff       	sbrs	r27, 7
 b82:	08 95       	ret
 b84:	82 1b       	sub	r24, r18
 b86:	93 0b       	sbc	r25, r19
 b88:	08 95       	ret

00000b8a <__muluhisi3>:
 b8a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__umulhisi3>
 b8e:	a5 9f       	mul	r26, r21
 b90:	90 0d       	add	r25, r0
 b92:	b4 9f       	mul	r27, r20
 b94:	90 0d       	add	r25, r0
 b96:	a4 9f       	mul	r26, r20
 b98:	80 0d       	add	r24, r0
 b9a:	91 1d       	adc	r25, r1
 b9c:	11 24       	eor	r1, r1
 b9e:	08 95       	ret

00000ba0 <_exit>:
 ba0:	f8 94       	cli

00000ba2 <__stop_program>:
 ba2:	ff cf       	rjmp	.-2      	; 0xba2 <__stop_program>
